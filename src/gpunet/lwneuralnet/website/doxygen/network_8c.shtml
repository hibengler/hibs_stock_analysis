<!-- included by doxygen in all doxygen-generated pages -->
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
  <title>Lightweight Neural Network Documentation</title>
  <link href="http://sourceforge.net/cssdef.php" rel="stylesheet", type="text/css">
  <link href="doxygen.css" rel="stylesheet" type="text/css">
</head>

<body link="#003399" vlink="#003399" alink="#003399">
<!--#include virtual="/components/header.html" -->
<!--#exec cgi="/cgi-bin/logger.cgi" -->
<!-- Generated by Doxygen 1.4.2 -->
<div class="qindex"><a class="qindex" href="index.shtml">Main&nbsp;Page</a> | <a class="qindex" href="dirs.shtml">Directories</a> | <a class="qindex" href="files.shtml">File&nbsp;List</a> | <a class="qindex" href="globals.shtml">Globals</a></div>
<div class="nav">
<a class="el" href="dir_000000.shtml">lwneuralnet-0.8</a>&nbsp;/&nbsp;<a class="el" href="dir_000001.shtml">source</a></div>
<h1>network.c File Reference</h1><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="network_8c.shtml#a3">net_randomize</a> (network_t *net, float range)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Assign random values to all weights in the network.  <a href="#a3"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="network_8c.shtml#a4">net_reset_deltas</a> (network_t *net)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set deltas of the network to 0.  <a href="#a4"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="network_8c.shtml#a5">net_use_bias</a> (network_t *net, int flag)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Enable or disable use of bias.  <a href="#a5"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="network_8c.shtml#a6">allocate_layer</a> (layer_t *layer, int no_of_neurons)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">[Internal] Allocate memory for the neurons in a layer of a network.  <a href="#a6"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="network_8c.shtml#a7">allocate_weights</a> (layer_t *lower, layer_t *upper)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">[Internal] Allocate memory for the weights connecting two layers.  <a href="#a7"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">network_t *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="network_8c.shtml#a8">net_allocate_l</a> (int no_of_layers, const int *arglist)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Allocate memory for a network.  <a href="#a8"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">network_t *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="network_8c.shtml#a9">net_allocate</a> (int no_of_layers,...)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Allocate memory for a network.  <a href="#a9"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="network_8c.shtml#a10">net_free</a> (network_t *net)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Free memory allocated for a network.  <a href="#a10"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="network_8c.shtml#a11">net_set_momentum</a> (network_t *net, float momentum)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Change the momentum of a network.  <a href="#a11"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="network_8c.shtml#a12">net_get_momentum</a> (const network_t *net)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Retrieve the momentum of a network.  <a href="#a12"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="network_8c.shtml#a13">net_set_learning_rate</a> (network_t *net, float learning_rate)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Change the learning rate of a network.  <a href="#a13"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="network_8c.shtml#a14">net_get_learning_rate</a> (const network_t *net)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Retrieve the momentum of a network.  <a href="#a14"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="network_8c.shtml#a15">net_get_no_of_inputs</a> (const network_t *net)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Retrieve the number of inputs of a network.  <a href="#a15"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="network_8c.shtml#a16">net_get_no_of_outputs</a> (const network_t *net)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Retrieve the number of outputs of a network.  <a href="#a16"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="network_8c.shtml#a17">net_get_no_of_layers</a> (const network_t *net)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Retrieve the number of layers of a network.  <a href="#a17"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="network_8c.shtml#a18">net_get_no_of_weights</a> (const network_t *net)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Retrieve the number of weights of a network.  <a href="#a18"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="network_8c.shtml#a19">net_set_weight</a> (network_t *net, int l, int nl, int nu, float weight)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set a weight of a network.  <a href="#a19"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="network_8c.shtml#a20">net_get_weight</a> (const network_t *net, int l, int nl, int nu)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Retrieve a weight of a network.  <a href="#a20"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="network_8c.shtml#a21">net_get_bias</a> (const network_t *net, int l, int nu)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Retrieve a bias weight of a network.  <a href="#a21"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="network_8c.shtml#a22">net_set_bias</a> (network_t *net, int l, int nu, float weight)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Retrieve a bias weight of a network.  <a href="#a22"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="network_8c.shtml#a23">net_fprint</a> (FILE *file, const network_t *net)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Write a network to a file.  <a href="#a23"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">network_t *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="network_8c.shtml#a24">net_fscan</a> (FILE *file)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Read a network from a file.  <a href="#a24"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="network_8c.shtml#a25">net_print</a> (const network_t *net)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Write a network to a stdout.  <a href="#a25"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="network_8c.shtml#a26">net_save</a> (const char *filename, const network_t *net)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Write a network to a file.  <a href="#a26"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">network_t *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="network_8c.shtml#a27">net_load</a> (const char *filename)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Read a network from a file.  <a href="#a27"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="network_8c.shtml#a28">net_fbprint</a> (FILE *file, const network_t *net)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Write a network to a binary file.  <a href="#a28"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">network_t *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="network_8c.shtml#a29">net_fbscan</a> (FILE *file)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Read a network from a binary file.  <a href="#a29"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="network_8c.shtml#a30">net_bsave</a> (const char *filename, const network_t *net)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Write a network to a binary file.  <a href="#a30"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">network_t *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="network_8c.shtml#a31">net_bload</a> (const char *filename)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Read a network from a binary file.  <a href="#a31"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a32" doxytag="network.c::set_input"></a>
static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="network_8c.shtml#a32">set_input</a> (network_t *net, const float *input)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">[Internal] Copy inputs to input layer of a network. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a33" doxytag="network.c::get_output"></a>
static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="network_8c.shtml#a33">get_output</a> (const network_t *net, float *output)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">[Interal] Copy outputs from output layer of a network. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a34" doxytag="network.c::sigma"></a>
static float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="network_8c.shtml#a34">sigma</a> (float x)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">[Internal] Activation function of a neuron. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a35" doxytag="network.c::propagate_layer"></a>
static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="network_8c.shtml#a35">propagate_layer</a> (layer_t *lower, layer_t *upper)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">[Internal] Forward propagate inputs from one layer to next layer. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a36" doxytag="network.c::forward_pass"></a>
static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="network_8c.shtml#a36">forward_pass</a> (network_t *net)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">[Internal] Forward propagate inputs through a network. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="network_8c.shtml#a37">net_compute_output_error</a> (network_t *net, const float *target)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Compute the output error of a network.  <a href="#a37"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">float&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="network_8c.shtml#a38">net_get_output_error</a> (const network_t *net)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Retrieve the output error of a network.  <a href="#a38"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a39" doxytag="network.c::backpropagate_layer"></a>
static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="network_8c.shtml#a39">backpropagate_layer</a> (layer_t *lower, layer_t *upper)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">[Internal] Backpropagate error from one layer to previous layer. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a40" doxytag="network.c::backward_pass"></a>
static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="network_8c.shtml#a40">backward_pass</a> (network_t *net)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">[Internal] Backpropagate output error through a network. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="a41" doxytag="network.c::adjust_weights"></a>
static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="network_8c.shtml#a41">adjust_weights</a> (network_t *net)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">[Internal] Adjust weights based on (backpropagated) output error. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="network_8c.shtml#a42">net_compute</a> (network_t *net, const float *input, float *output)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Compute outputs of a network for given inputs.  <a href="#a42"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="network_8c.shtml#a43">net_train</a> (network_t *net)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Train a network.  <a href="#a43"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="network_8c.shtml#a44">adjust_deltas_batch</a> (network_t *net)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">[Internal] Adjust deltas based on (backpropagated) output error.  <a href="#a44"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="network_8c.shtml#a45">adjust_weights_batch</a> (network_t *net)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">[Internal] Adjust weights based on deltas determined by batch training.  <a href="#a45"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="network_8c.shtml#a46">net_begin_batch</a> (network_t *net)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Begin training in batch mode.  <a href="#a46"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="network_8c.shtml#a47">net_train_batch</a> (network_t *net)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Train a network in batch mode.  <a href="#a47"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="network_8c.shtml#a48">net_end_batch</a> (network_t *net)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">End training in batch mode adjusting weights.  <a href="#a48"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="network_8c.shtml#a49">net_jolt</a> (network_t *net, float factor, float range)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Make small random changes to the weights of a network.  <a href="#a49"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="network_8c.shtml#a50">net_add_neurons</a> (network_t *net, int layer, int neuron, int number, float range)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Add neurons to a network.  <a href="#a50"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="network_8c.shtml#a51">net_remove_neurons</a> (network_t *net, int layer, int neuron, int number)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Remove neurons from a network.  <a href="#a51"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">network_t *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="network_8c.shtml#a52">net_copy</a> (const network_t *net)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Copy a network.  <a href="#a52"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="network_8c.shtml#a53">net_overwrite</a> (network_t *dest, const network_t *src)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Overwrite one network with another.  <a href="#a53"></a><br></td></tr>
</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
Lightweight backpropagation neural network.<p>
This is a lightweight library implementating a neural network for use in C and C++ programs. It is intended for use in applications that just happen to need a simply neural network and do not want to use needlessly complex neural network libraries. It features multilayer feedforward perceptron neural networks, sigmoidal activation function with bias, backpropagation training with settable learning rate and momentum, and backpropagation training in batches. <hr><h2>Function Documentation</h2>
<a class="anchor" name="a44" doxytag="network.c::adjust_deltas_batch"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">static void adjust_deltas_batch           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">network_t *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>net</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline, static]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
[Internal] Adjust deltas based on (backpropagated) output error. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>net</em>&nbsp;</td><td>Pointer to a neural network. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a45" doxytag="network.c::adjust_weights_batch"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">static void adjust_weights_batch           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">network_t *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>net</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap><code> [inline, static]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
[Internal] Adjust weights based on deltas determined by batch training. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>net</em>&nbsp;</td><td>Pointer to a neural network. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a6" doxytag="network.c::allocate_layer"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">static void allocate_layer           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">layer_t *&nbsp;</td>
          <td class="mdname" nowrap> <em>layer</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>no_of_neurons</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"><code> [static]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
[Internal] Allocate memory for the neurons in a layer of a network. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>layer</em>&nbsp;</td><td>Pointer to layer of a neural network. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>no_of_neurons</em>&nbsp;</td><td>Integer.</td></tr>
  </table>
</dl>
Allocate memory for a list of no_of_neuron + 1 neurons in the specified layer. The extra neuron is used for the bias.     </td>
  </tr>
</table>
<a class="anchor" name="a7" doxytag="network.c::allocate_weights"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">static void allocate_weights           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">layer_t *&nbsp;</td>
          <td class="mdname" nowrap> <em>lower</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>layer_t *&nbsp;</td>
          <td class="mdname" nowrap> <em>upper</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"><code> [static]</code></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
[Internal] Allocate memory for the weights connecting two layers. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>lower</em>&nbsp;</td><td>Pointer to one layer of a neural network. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>upper</em>&nbsp;</td><td>Pointer to the next layer of a neural network.</td></tr>
  </table>
</dl>
Allocate memory for the weights connecting two layers of a neural network. The neurons in these layers should previously have been allocated with <a class="el" href="network_8c.shtml#a6">allocate_layer()</a>.     </td>
  </tr>
</table>
<a class="anchor" name="a50" doxytag="network.c::net_add_neurons"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">void net_add_neurons           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">network_t *&nbsp;</td>
          <td class="mdname" nowrap> <em>net</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>layer</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>neuron</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>number</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>float&nbsp;</td>
          <td class="mdname" nowrap> <em>range</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Add neurons to a network. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>net</em>&nbsp;</td><td>Pointer to a neural network. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>layer</em>&nbsp;</td><td>Integer </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>neuron</em>&nbsp;</td><td>Integer </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>number</em>&nbsp;</td><td>Integer </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>range</em>&nbsp;</td><td>Floating point number </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a9" doxytag="network.c::net_allocate"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">network_t* net_allocate           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname" nowrap> <em>no_of_layers</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>&nbsp;</td>
          <td class="mdname" nowrap> <em>...</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Allocate memory for a network. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>no_of_layers</em>&nbsp;</td><td>Integer. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>...</em>&nbsp;</td><td>Sequence of integers. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Pointer to newly allocated network.</dd></dl>
Allocate memory for a neural network with no_of_layer layers, including the input and output layer. The number of neurons in each layer is given as ..., starting with the input layer and ending with the output layer.     </td>
  </tr>
</table>
<a class="anchor" name="a8" doxytag="network.c::net_allocate_l"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">network_t* net_allocate_l           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname" nowrap> <em>no_of_layers</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>const int *&nbsp;</td>
          <td class="mdname" nowrap> <em>arglist</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Allocate memory for a network. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>no_of_layers</em>&nbsp;</td><td>Integer. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>arglist</em>&nbsp;</td><td>Pointer to sequence of integers. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Pointer to newly allocated network.</dd></dl>
Allocate memory for a neural network with no_of_layer layers, including the input and output layer. The number of neurons in each layer is given in arglist, with arglist[0] being the number of neurons in the input layer and arglist[no_of_layers-1] the number of neurons in the output layer.     </td>
  </tr>
</table>
<a class="anchor" name="a46" doxytag="network.c::net_begin_batch"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">void net_begin_batch           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">network_t *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>net</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Begin training in batch mode. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>net</em>&nbsp;</td><td>Pointer to a neural network.</td></tr>
  </table>
</dl>
Note that batch training does not care about momentum.     </td>
  </tr>
</table>
<a class="anchor" name="a31" doxytag="network.c::net_bload"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">network_t* net_bload           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const char *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>filename</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Read a network from a binary file. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>filename</em>&nbsp;</td><td>Pointer to name of file to read from. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Pointer to the read neural network on success, NULL on failure. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a30" doxytag="network.c::net_bsave"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int net_bsave           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>filename</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>const network_t *&nbsp;</td>
          <td class="mdname" nowrap> <em>net</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Write a network to a binary file. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>filename</em>&nbsp;</td><td>Pointer to name of file to write to. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>net</em>&nbsp;</td><td>Pointer to a neural network. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>0 on success, a negative number on failure.</dd></dl>
Write a binary representation of a neural network to a file. Note that the resulting file is not necessarily portable across platforms.     </td>
  </tr>
</table>
<a class="anchor" name="a42" doxytag="network.c::net_compute"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">void net_compute           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">network_t *&nbsp;</td>
          <td class="mdname" nowrap> <em>net</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>const float *&nbsp;</td>
          <td class="mdname" nowrap> <em>input</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>float *&nbsp;</td>
          <td class="mdname" nowrap> <em>output</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Compute outputs of a network for given inputs. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>net</em>&nbsp;</td><td>Pointer to a neural network. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>input</em>&nbsp;</td><td>Pointer to sequence of floating point numbers. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>output</em>&nbsp;</td><td>Pointer to sequence of floating point numbers or NULL.</td></tr>
  </table>
</dl>
Compute outputs of a neural network for given inputs by forward propagating the inputs through the layers. If output is non-NULL, the outputs are copied to output (otherwise they are only stored internally in the network). Note that the outputs of the neural network will always lie in the interval (0,1); the caller will have to rescale them if neccesary.     </td>
  </tr>
</table>
<a class="anchor" name="a37" doxytag="network.c::net_compute_output_error"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">float net_compute_output_error           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">network_t *&nbsp;</td>
          <td class="mdname" nowrap> <em>net</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>const float *&nbsp;</td>
          <td class="mdname" nowrap> <em>target</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Compute the output error of a network. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>net</em>&nbsp;</td><td>Pointer to a neural network. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>target</em>&nbsp;</td><td>Pointer to a sequence of floating point numbers. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Output error of the neural network.</dd></dl>
Before calling this routine, <a class="el" href="network_8c.shtml#a42">net_compute()</a> should have been called to compute the ouputs for given inputs. This routine compares the actual output of the neural network (which is stored internally in the neural network) and the intended output (in target). The return value is the half the square of the Euclidean distance between the actual output and the target. This routine also prepares the network for backpropagation training by storing (internally in the neural network) the errors associated with each of the outputs. Note that the targets shoud lie in the interval [0,1], since the outputs of the neural network will always lie in the interval (0,1).     </td>
  </tr>
</table>
<a class="anchor" name="a52" doxytag="network.c::net_copy"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">network_t* net_copy           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const network_t *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>net</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Copy a network. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>net</em>&nbsp;</td><td>Pointer to a neural network. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Pointer to a copy of the neural network. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a48" doxytag="network.c::net_end_batch"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">void net_end_batch           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">network_t *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>net</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
End training in batch mode adjusting weights. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>net</em>&nbsp;</td><td>Pointer to a neural network.</td></tr>
  </table>
</dl>
Adjust the weights in the neural network according to the average delta of all patterns in the batch.     </td>
  </tr>
</table>
<a class="anchor" name="a28" doxytag="network.c::net_fbprint"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int net_fbprint           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">FILE *&nbsp;</td>
          <td class="mdname" nowrap> <em>file</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>const network_t *&nbsp;</td>
          <td class="mdname" nowrap> <em>net</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Write a network to a binary file. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>file</em>&nbsp;</td><td>Pointer to file descriptor. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>net</em>&nbsp;</td><td>Pointer to a neural network. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>0 on success, a negative number on failure.</dd></dl>
Write a binary representation of a neural network to a file. Note that the resulting file is not necessarily portable across platforms.     </td>
  </tr>
</table>
<a class="anchor" name="a29" doxytag="network.c::net_fbscan"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">network_t* net_fbscan           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">FILE *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>file</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Read a network from a binary file. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>file</em>&nbsp;</td><td>Pointer to a file descriptor. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Pointer to the read neural network on success, NULL on failure. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a23" doxytag="network.c::net_fprint"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int net_fprint           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">FILE *&nbsp;</td>
          <td class="mdname" nowrap> <em>file</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>const network_t *&nbsp;</td>
          <td class="mdname" nowrap> <em>net</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Write a network to a file. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>file</em>&nbsp;</td><td>Pointer to file descriptor. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>net</em>&nbsp;</td><td>Pointer to a neural network. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>0 on success, a negative number of failure. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a10" doxytag="network.c::net_free"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">void net_free           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">network_t *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>net</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Free memory allocated for a network. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>net</em>&nbsp;</td><td>Pointer to a neural network. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a24" doxytag="network.c::net_fscan"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">network_t* net_fscan           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">FILE *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>file</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Read a network from a file. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>file</em>&nbsp;</td><td>Pointer to a file descriptor. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Pointer to the read neural network on success, NULL on failure. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a21" doxytag="network.c::net_get_bias"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">float net_get_bias           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const network_t *&nbsp;</td>
          <td class="mdname" nowrap> <em>net</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>l</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>nu</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Retrieve a bias weight of a network. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>net</em>&nbsp;</td><td>Pointer to a neural network. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>l</em>&nbsp;</td><td>Number of layer. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>nu</em>&nbsp;</td><td>Number of the layer. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Bias weight of the neuron numbered nu in the layer numbered l.</dd></dl>
[internal] Bias is implemented by having an extra neuron in every layer. The output of this neuron is permanently set to 1. The bias weight returned by this routine is simply the weight from this extra neuron in the layer numbered l-1 to the neuron numbered nu in the layer numbered l.     </td>
  </tr>
</table>
<a class="anchor" name="a14" doxytag="network.c::net_get_learning_rate"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">float net_get_learning_rate           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const network_t *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>net</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Retrieve the momentum of a network. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>net</em>&nbsp;</td><td>Pointer to a neural network. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Learning rate of the neural work. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a12" doxytag="network.c::net_get_momentum"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">float net_get_momentum           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const network_t *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>net</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Retrieve the momentum of a network. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>net</em>&nbsp;</td><td>Pointer to a neural network. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Momentum of the neural work. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a15" doxytag="network.c::net_get_no_of_inputs"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int net_get_no_of_inputs           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const network_t *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>net</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Retrieve the number of inputs of a network. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>net</em>&nbsp;</td><td>Pointer to a neural network. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Number of neurons in the input layer of the neural network. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a17" doxytag="network.c::net_get_no_of_layers"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int net_get_no_of_layers           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const network_t *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>net</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Retrieve the number of layers of a network. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>net</em>&nbsp;</td><td>Pointer to a neural network. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Number of layers, including the input and output layers, of the neural network. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a16" doxytag="network.c::net_get_no_of_outputs"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int net_get_no_of_outputs           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const network_t *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>net</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Retrieve the number of outputs of a network. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>net</em>&nbsp;</td><td>Pointer to a neural network. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Number of neurons in the output layer of the neural network. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a18" doxytag="network.c::net_get_no_of_weights"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int net_get_no_of_weights           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const network_t *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>net</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Retrieve the number of weights of a network. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>net</em>&nbsp;</td><td>Pointer to a neural network. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>The total number of weights in the neural network. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a38" doxytag="network.c::net_get_output_error"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">float net_get_output_error           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const network_t *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>net</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Retrieve the output error of a network. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>net</em>&nbsp;</td><td>Pointer to a neural network. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Output error of the neural network.</dd></dl>
Before calling this routine, <a class="el" href="network_8c.shtml#a42">net_compute()</a> and <a class="el" href="network_8c.shtml#a37">net_compute_output_error()</a> should have been called to compute outputs for given inputs and to acually compute the output error. This routine merely returns the output error (which is stored internally in the neural network).     </td>
  </tr>
</table>
<a class="anchor" name="a20" doxytag="network.c::net_get_weight"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">float net_get_weight           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const network_t *&nbsp;</td>
          <td class="mdname" nowrap> <em>net</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>l</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>nl</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>nu</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Retrieve a weight of a network. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>net</em>&nbsp;</td><td>Pointer to a neural network. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>l</em>&nbsp;</td><td>Number of lower layer. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>nl</em>&nbsp;</td><td>Number of neuron in the lower layer. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>nu</em>&nbsp;</td><td>Number of neuron in the next layer. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Weight connecting the neuron numbered nl in the layer numbered l with the neuron numbered nu in the layer numbered l+1. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a49" doxytag="network.c::net_jolt"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">void net_jolt           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">network_t *&nbsp;</td>
          <td class="mdname" nowrap> <em>net</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>float&nbsp;</td>
          <td class="mdname" nowrap> <em>factor</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>float&nbsp;</td>
          <td class="mdname" nowrap> <em>range</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Make small random changes to the weights of a network. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>net</em>&nbsp;</td><td>Pointer to a neural network. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>factor</em>&nbsp;</td><td>Floating point number. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>range</em>&nbsp;</td><td>Floating point number.</td></tr>
  </table>
</dl>
All weights in the neural network that are in absolute value smaller than range become a random value from the interval [-range,range]. All other weights get multiplied by a random value from the interval [1-factor,1+factor].     </td>
  </tr>
</table>
<a class="anchor" name="a27" doxytag="network.c::net_load"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">network_t* net_load           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const char *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>filename</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Read a network from a file. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>filename</em>&nbsp;</td><td>Pointer to name of file to read from. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Pointer to the read neural network on success, NULL on failure. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a53" doxytag="network.c::net_overwrite"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">void net_overwrite           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">network_t *&nbsp;</td>
          <td class="mdname" nowrap> <em>dest</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>const network_t *&nbsp;</td>
          <td class="mdname" nowrap> <em>src</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Overwrite one network with another. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>dest</em>&nbsp;</td><td>Pointer to a neural network. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>src</em>&nbsp;</td><td>Pointer to a neural network.</td></tr>
  </table>
</dl>
The neural network dest becomes a copy of the neural network src. Note that dest must be an allocated neural network and its original contents is discarded (with <a class="el" href="network_8c.shtml#a10">net_free()</a>).     </td>
  </tr>
</table>
<a class="anchor" name="a25" doxytag="network.c::net_print"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int net_print           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const network_t *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>net</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Write a network to a stdout. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>net</em>&nbsp;</td><td>Pointer to a neural network. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>0 on success, a negative number on failure. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a3" doxytag="network.c::net_randomize"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">void net_randomize           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">network_t *&nbsp;</td>
          <td class="mdname" nowrap> <em>net</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>float&nbsp;</td>
          <td class="mdname" nowrap> <em>range</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Assign random values to all weights in the network. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>net</em>&nbsp;</td><td>Pointer to neural network. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>range</em>&nbsp;</td><td>Floating point number.</td></tr>
  </table>
</dl>
All weights in the neural network are assigned a random value from the interval [-range,range].     </td>
  </tr>
</table>
<a class="anchor" name="a51" doxytag="network.c::net_remove_neurons"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">void net_remove_neurons           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">network_t *&nbsp;</td>
          <td class="mdname" nowrap> <em>net</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>layer</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>neuron</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>number</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Remove neurons from a network. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>net</em>&nbsp;</td><td>Pointer to a neural network. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>layer</em>&nbsp;</td><td>Integer </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>neuron</em>&nbsp;</td><td>Integer </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>number</em>&nbsp;</td><td>Integer </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a4" doxytag="network.c::net_reset_deltas"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">void net_reset_deltas           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">network_t *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>net</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Set deltas of the network to 0. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>net</em>&nbsp;</td><td>Pointer to neural network. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a26" doxytag="network.c::net_save"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">int net_save           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>filename</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>const network_t *&nbsp;</td>
          <td class="mdname" nowrap> <em>net</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Write a network to a file. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>filename</em>&nbsp;</td><td>Pointer to name of file to write to. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>net</em>&nbsp;</td><td>Pointer to a neural network. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>0 on success, a negative number on failure. </dd></dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a22" doxytag="network.c::net_set_bias"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">void net_set_bias           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">network_t *&nbsp;</td>
          <td class="mdname" nowrap> <em>net</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>l</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>nu</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>float&nbsp;</td>
          <td class="mdname" nowrap> <em>weight</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Retrieve a bias weight of a network. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>net</em>&nbsp;</td><td>Pointer to a neural network. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>l</em>&nbsp;</td><td>Number of layer. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>nu</em>&nbsp;</td><td>Number of the layer. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>weight</em>&nbsp;</td><td>Floating point number. Set the bias weight of the neuron numbered nu in the layer numbered l.</td></tr>
  </table>
</dl>
[internal] Bias is implemented by having an extra neuron in every layer. The output of this neuron is permanently set to 1. This routine simply sets the the weight from this extra neuron in the layer numbered l-1 to the neuron numbered nu in the layer numbered l.     </td>
  </tr>
</table>
<a class="anchor" name="a13" doxytag="network.c::net_set_learning_rate"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">void net_set_learning_rate           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">network_t *&nbsp;</td>
          <td class="mdname" nowrap> <em>net</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>float&nbsp;</td>
          <td class="mdname" nowrap> <em>learning_rate</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Change the learning rate of a network. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>net</em>&nbsp;</td><td>Pointer to a neural network. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>learning_rate</em>&nbsp;</td><td>Floating point number. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a11" doxytag="network.c::net_set_momentum"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">void net_set_momentum           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">network_t *&nbsp;</td>
          <td class="mdname" nowrap> <em>net</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>float&nbsp;</td>
          <td class="mdname" nowrap> <em>momentum</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Change the momentum of a network. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>net</em>&nbsp;</td><td>Pointer to a neural network. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>momentum</em>&nbsp;</td><td>Floating point number. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a19" doxytag="network.c::net_set_weight"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">void net_set_weight           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">network_t *&nbsp;</td>
          <td class="mdname" nowrap> <em>net</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>l</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>nl</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>nu</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>float&nbsp;</td>
          <td class="mdname" nowrap> <em>weight</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Set a weight of a network. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>net</em>&nbsp;</td><td>Pointer to a neural network. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>l</em>&nbsp;</td><td>Number of lower layer. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>nl</em>&nbsp;</td><td>Number of neuron in the lower layer. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>nu</em>&nbsp;</td><td>Number of neuron in the next layer. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>weight</em>&nbsp;</td><td>Floating point number. The weight connecting the neuron numbered nl in the layer numbered l with the neuron numbered nu in the layer numbered l+1 is set to weight. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a class="anchor" name="a43" doxytag="network.c::net_train"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">void net_train           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">network_t *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>net</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Train a network. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>net</em>&nbsp;</td><td>Pointer to a neural network.</td></tr>
  </table>
</dl>
Before calling this routine, <a class="el" href="network_8c.shtml#a42">net_compute()</a> and <a class="el" href="network_8c.shtml#a37">net_compute_output_error()</a> should have been called to compute outputs for given inputs and to prepare the neural network for training by computing the output error. This routine performs the actual training by backpropagating the output error through the layers.     </td>
  </tr>
</table>
<a class="anchor" name="a47" doxytag="network.c::net_train_batch"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">void net_train_batch           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">network_t *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>net</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Train a network in batch mode. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>net</em>&nbsp;</td><td>Pointer to a neural network.</td></tr>
  </table>
</dl>
Before calling this routine, <a class="el" href="network_8c.shtml#a46">net_begin_batch()</a> should have been called (at the start of the batch) to begin batch training. Furthermore, for the current input/target pair, <a class="el" href="network_8c.shtml#a42">net_compute()</a> and <a class="el" href="network_8c.shtml#a37">net_compute_output_error()</a> should have been called to compute outputs for given the inputs and to prepare the neural network for training by computing the output error using the given targets. This routine performs the actual training by backpropagating the output error through the layers, but does not change the weights. The weights will be changed when (at the end of the batch) <a class="el" href="network_8c.shtml#a48">net_end_batch()</a> is called.     </td>
  </tr>
</table>
<a class="anchor" name="a5" doxytag="network.c::net_use_bias"></a><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">void net_use_bias           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">network_t *&nbsp;</td>
          <td class="mdname" nowrap> <em>net</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>flag</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Enable or disable use of bias. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>net</em>&nbsp;</td><td>Pointer to neural network. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>flag</em>&nbsp;</td><td>Boolean. Disable use of bias if flag is zero; enable otherwise. By default, bias is enabled. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<!-- included by doxygen in all doxygen-generated pages -->
<!--#include virtual="/components/footer_doxygen.shtml" -->
</body>
</html>
