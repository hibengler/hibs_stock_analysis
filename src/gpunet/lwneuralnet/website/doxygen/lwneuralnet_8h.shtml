<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">

<html>
<head>

  <link rel="stylesheet" type="text/css" 
        href="http://sourceforge.net/cssdef.php">
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
  <title>Lightweight Neural Network</title>

</head>

<body style="background-color: rgb(255, 255, 255); color: rgb(0, 0, 0);" 
      link="#003399" vlink="#003399" alink="#003399">

<!-- start page header -->
<table width="100%" border="0" cellspacing="0" cellpadding="0">
  <tbody>
    <tr valign="middle">
      <td bgcolor="#003399"><img src="images/blank.gif" alt="" border="0" width="1" height="2"></td>
    </tr>
    <tr valign="middle">
      <td bgcolor="#dddddd" width="100%" height="37" 
          background="images/navbar.gif" style="text-align: center;"><b class="xlgfc2b">Lightweight Neural Network</b></td>
    </tr>
    <tr valign="middle">
      <td bgcolor="#eeeeee"><img src="images/blank.gif" alt="" border="0" width="1" height="1"></td>
    </tr>
    <tr valign="middle" bgcolor="#cccccc">
      <td><img src="images/blank.gif" alt="" border="0" width="100%" height="2"></td>
    </tr>
    <tr valign="middle" bgcolor="#333333">
      <td><img src="images/blank.gif" alt="" border="0" width="100%" height="1"></td>
    </tr>
    <tr valign="middle" bgcolor="#999999">
      <td><img src="images/blank.gif" alt="" border="0" width="100%" height="1"></td>
    </tr>
  </tbody>
</table>
<!-- end page header -->
<!--#exec cgi="/cgi-bin/logger.cgi" -->

<br>
<!-- Generated by Doxygen 1.3.2 -->
<div class="qindex"><a class="qindex" href="index.shtml">Main&nbsp;Page</a> | <a class="qindex" href="annotated.shtml">Data&nbsp;Structures</a> | <a class="qindex" href="files.shtml">File&nbsp;List</a> | <a class="qindex" href="functions.shtml">Data&nbsp;Fields</a> | <a class="qindex" href="globals.shtml">Globals</a></div>
<h1>lwneuralnet.h File Reference</h1><table border=0 cellpadding=0 cellspacing=0>
<tr><td></td></tr>
<tr><td colspan=2><br><h2>Data Structures</h2></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>struct &nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="structlayer__t.shtml">layer_t</a></td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>struct &nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="structnetwork__t.shtml">network_t</a></td></tr>

<tr><td class="memItemLeft" nowrap align=right valign=top>struct &nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="structneuron__t.shtml">neuron_t</a></td></tr>

<tr><td colspan=2><br><h2>Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top><a class="el" href="structnetwork__t.shtml">network_t</a> *&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="lwneuralnet_8h.shtml#a0">net_allocate</a> (int,...)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Allocate memory for a network. </em> <a href="#a0"></a><em><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top><a class="el" href="structnetwork__t.shtml">network_t</a> *&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="lwneuralnet_8h.shtml#a1">net_allocate_l</a> (int, const int *)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Allocate memory for a network. </em> <a href="#a1"></a><em><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="lwneuralnet_8h.shtml#a2">net_free</a> (<a class="el" href="structnetwork__t.shtml">network_t</a> *)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Free memory allocated for a network. </em> <a href="#a2"></a><em><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="lwneuralnet_8h.shtml#a3">net_randomize</a> (<a class="el" href="structnetwork__t.shtml">network_t</a> *, float)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Assign random values to all weights in the network. </em> <a href="#a3"></a><em><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="lwneuralnet_8h.shtml#a4">net_reset_deltas</a> (<a class="el" href="structnetwork__t.shtml">network_t</a> *)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set deltas of the network to 0. </em> <a href="#a4"></a><em><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="lwneuralnet_8h.shtml#a5">net_set_momentum</a> (<a class="el" href="structnetwork__t.shtml">network_t</a> *, float)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Change the momentum of a network. </em> <a href="#a5"></a><em><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="lwneuralnet_8h.shtml#a6">net_set_learning_rate</a> (<a class="el" href="structnetwork__t.shtml">network_t</a> *, float)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Change the learning rate of a network. </em> <a href="#a6"></a><em><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>float&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="lwneuralnet_8h.shtml#a7">net_get_momentum</a> (const <a class="el" href="structnetwork__t.shtml">network_t</a> *)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Retrieve the momentum of a network. </em> <a href="#a7"></a><em><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>float&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="lwneuralnet_8h.shtml#a8">net_get_learning_rate</a> (const <a class="el" href="structnetwork__t.shtml">network_t</a> *)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Retrieve the momentum of a network. </em> <a href="#a8"></a><em><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>int&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="lwneuralnet_8h.shtml#a9">net_get_no_of_inputs</a> (const <a class="el" href="structnetwork__t.shtml">network_t</a> *)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Retrieve the number of inputs of a network. </em> <a href="#a9"></a><em><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>int&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="lwneuralnet_8h.shtml#a10">net_get_no_of_outputs</a> (const <a class="el" href="structnetwork__t.shtml">network_t</a> *)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Retrieve the number of outputs of a network. </em> <a href="#a10"></a><em><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>int&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="lwneuralnet_8h.shtml#a11">net_get_no_of_layers</a> (const <a class="el" href="structnetwork__t.shtml">network_t</a> *)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Retrieve the number of layers of a network. </em> <a href="#a11"></a><em><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>float&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="lwneuralnet_8h.shtml#a12">net_get_weight</a> (const <a class="el" href="structnetwork__t.shtml">network_t</a> *, int, int, int)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Retrieve a weight of a network. </em> <a href="#a12"></a><em><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>int&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="lwneuralnet_8h.shtml#a13">net_fprint</a> (FILE *, const <a class="el" href="structnetwork__t.shtml">network_t</a> *)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Write a network to a file. </em> <a href="#a13"></a><em><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top><a class="el" href="structnetwork__t.shtml">network_t</a> *&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="lwneuralnet_8h.shtml#a14">net_fscan</a> (FILE *)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Read a network from a file. </em> <a href="#a14"></a><em><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>int&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="lwneuralnet_8h.shtml#a15">net_print</a> (const <a class="el" href="structnetwork__t.shtml">network_t</a> *)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Write a network to a stdout. </em> <a href="#a15"></a><em><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>int&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="lwneuralnet_8h.shtml#a16">net_save</a> (const char *, const <a class="el" href="structnetwork__t.shtml">network_t</a> *)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Write a network to a file. </em> <a href="#a16"></a><em><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top><a class="el" href="structnetwork__t.shtml">network_t</a> *&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="lwneuralnet_8h.shtml#a17">net_load</a> (const char *)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Read a network from a file. </em> <a href="#a17"></a><em><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="lwneuralnet_8h.shtml#a18">net_compute</a> (<a class="el" href="structnetwork__t.shtml">network_t</a> *, const float *, float *)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Compute outputs of a network for given inputs. </em> <a href="#a18"></a><em><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>float&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="lwneuralnet_8h.shtml#a19">net_compute_output_error</a> (<a class="el" href="structnetwork__t.shtml">network_t</a> *, const float *)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Compute the output error of a network. </em> <a href="#a19"></a><em><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>float&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="lwneuralnet_8h.shtml#a20">net_get_output_error</a> (const <a class="el" href="structnetwork__t.shtml">network_t</a> *)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Retrieve the output error of a network. </em> <a href="#a20"></a><em><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="lwneuralnet_8h.shtml#a21">net_train</a> (<a class="el" href="structnetwork__t.shtml">network_t</a> *)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Train a network. </em> <a href="#a21"></a><em><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="lwneuralnet_8h.shtml#a22">net_jolt</a> (<a class="el" href="structnetwork__t.shtml">network_t</a> *, float, float)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Make small random changes to the weight of a network. </em> <a href="#a22"></a><em><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="lwneuralnet_8h.shtml#a23">net_add_neurons</a> (<a class="el" href="structnetwork__t.shtml">network_t</a> *, int, int, int, float)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Add neurons to a network. </em> <a href="#a23"></a><em><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top>void&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="lwneuralnet_8h.shtml#a24">net_remove_neurons</a> (<a class="el" href="structnetwork__t.shtml">network_t</a> *, int, int, int)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Remove neurons from a network. </em> <a href="#a24"></a><em><br><br></td></tr>
<tr><td class="memItemLeft" nowrap align=right valign=top><a class="el" href="structnetwork__t.shtml">network_t</a> *&nbsp;</td><td class="memItemRight" valign=bottom><a class="el" href="lwneuralnet_8h.shtml#a25">net_copy</a> (const <a class="el" href="structnetwork__t.shtml">network_t</a> *)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Copy a network. </em> <a href="#a25"></a><em><br><br></td></tr>
</table>
<hr><h2>Function Documentation</h2>
<a name="a23" doxytag="lwneuralnet.h::net_add_neurons"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> void net_add_neurons </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="structnetwork__t.shtml">network_t</a> *&nbsp;</td>
          <td class="mdname" nowrap> <em>net</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>layer</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>neuron</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>number</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>float&nbsp;</td>
          <td class="mdname" nowrap> <em>range</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Add neurons to a network. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>net</em>&nbsp;</td><td>Pointer to a neural network. </td></tr>
    <tr><td valign=top><em>layer</em>&nbsp;</td><td>Integer </td></tr>
    <tr><td valign=top><em>neuron</em>&nbsp;</td><td>Integer </td></tr>
    <tr><td valign=top><em>number</em>&nbsp;</td><td>Integer </td></tr>
    <tr><td valign=top><em>range</em>&nbsp;</td><td>Floating point number </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a name="a0" doxytag="lwneuralnet.h::net_allocate"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> <a class="el" href="structnetwork__t.shtml">network_t</a>* net_allocate </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname" nowrap> <em>no_of_layers</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>...&nbsp;</td>
          <td class="mdname" nowrap></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Allocate memory for a network. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>no_of_layers</em>&nbsp;</td><td>Integer. </td></tr>
    <tr><td valign=top><em>...</em>&nbsp;</td><td>Sequence of integers. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Pointer to newly allocated network.</dd></dl>
Allocate memory for a neural network with no_of_layer layers, including the input and output layer. The number of neurons in each layer is given as ..., starting with the input layer and ending with the output layer.     </td>
  </tr>
</table>
<a name="a1" doxytag="lwneuralnet.h::net_allocate_l"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> <a class="el" href="structnetwork__t.shtml">network_t</a>* net_allocate_l </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">int&nbsp;</td>
          <td class="mdname" nowrap> <em>no_of_layers</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>const int *&nbsp;</td>
          <td class="mdname" nowrap> <em>arglist</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Allocate memory for a network. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>no_of_layers</em>&nbsp;</td><td>Integer. </td></tr>
    <tr><td valign=top><em>arglist</em>&nbsp;</td><td>Pointer to sequence of integers. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Pointer to newly allocated network.</dd></dl>
Allocate memory for a neural network with no_of_layer layers, including the input and output layer. The number of neurons in each layer is given in arglist, with arglist[0] being the number of neurons in the input layer and arglist[no_of_layers-1] the number of neurons in the output layer.     </td>
  </tr>
</table>
<a name="a18" doxytag="lwneuralnet.h::net_compute"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> void net_compute </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="structnetwork__t.shtml">network_t</a> *&nbsp;</td>
          <td class="mdname" nowrap> <em>net</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>const float *&nbsp;</td>
          <td class="mdname" nowrap> <em>input</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>float *&nbsp;</td>
          <td class="mdname" nowrap> <em>output</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Compute outputs of a network for given inputs. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>net</em>&nbsp;</td><td>Pointer to a neural network. </td></tr>
    <tr><td valign=top><em>input</em>&nbsp;</td><td>Pointer to sequence of floating point numbers. </td></tr>
    <tr><td valign=top><em>output</em>&nbsp;</td><td>Pointer to sequence of floating point numbers or NULL.</td></tr>
  </table>
</dl>
Compute outputs of a neural network for given inputs by forward propagating the inputs through the layers. If output is non-NULL, the outputs are copied to output (otherwise they are only stored internally in the network).     </td>
  </tr>
</table>
<a name="a19" doxytag="lwneuralnet.h::net_compute_output_error"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> float net_compute_output_error </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="structnetwork__t.shtml">network_t</a> *&nbsp;</td>
          <td class="mdname" nowrap> <em>net</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>const float *&nbsp;</td>
          <td class="mdname" nowrap> <em>target</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Compute the output error of a network. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>net</em>&nbsp;</td><td>Pointer to a neural network. </td></tr>
    <tr><td valign=top><em>target</em>&nbsp;</td><td>Pointer to a sequence of floating point numbers. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Output error of the neural network.</dd></dl>
Before calling this routine, <a class="el" href="lwneuralnet_8h.shtml#a18">net_compute()</a> should have been called to compute the ouputs for a given input. This routine compares the actual output of the neural network (which is stored internally in the neural network) and the intended output (in target). The return value is the half the square of the Euclidean distance between the actual output and the target. This routine also prepares the network for backpropagation training by storing (internally in the neural network) the errors associated with each of the outputs.     </td>
  </tr>
</table>
<a name="a25" doxytag="lwneuralnet.h::net_copy"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> <a class="el" href="structnetwork__t.shtml">network_t</a>* net_copy </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="structnetwork__t.shtml">network_t</a> *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>net</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Copy a network. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>net</em>&nbsp;</td><td>Pointer to a neural network. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Pointer to a copy of the neural network. </dd></dl>
    </td>
  </tr>
</table>
<a name="a13" doxytag="lwneuralnet.h::net_fprint"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> int net_fprint </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">FILE *&nbsp;</td>
          <td class="mdname" nowrap> <em>file</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>const <a class="el" href="structnetwork__t.shtml">network_t</a> *&nbsp;</td>
          <td class="mdname" nowrap> <em>net</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Write a network to a file. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>file</em>&nbsp;</td><td>Pointer to file descriptor. </td></tr>
    <tr><td valign=top><em>net</em>&nbsp;</td><td>Pointer to a neural network. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>0 on success, a negative number of failure. </dd></dl>
    </td>
  </tr>
</table>
<a name="a2" doxytag="lwneuralnet.h::net_free"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> void net_free </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="structnetwork__t.shtml">network_t</a> *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>net</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Free memory allocated for a network. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>net</em>&nbsp;</td><td>Pointer to a neural network. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a name="a14" doxytag="lwneuralnet.h::net_fscan"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> <a class="el" href="structnetwork__t.shtml">network_t</a>* net_fscan </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">FILE *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>file</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Read a network from a file. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>file</em>&nbsp;</td><td>Pointer to a file descriptor. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Pointer to the read neural network on success, NULL on failure. </dd></dl>
    </td>
  </tr>
</table>
<a name="a8" doxytag="lwneuralnet.h::net_get_learning_rate"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> float net_get_learning_rate </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="structnetwork__t.shtml">network_t</a> *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>net</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Retrieve the momentum of a network. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>net</em>&nbsp;</td><td>Pointer to a neural network. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Learning rate of the neural work. </dd></dl>
    </td>
  </tr>
</table>
<a name="a7" doxytag="lwneuralnet.h::net_get_momentum"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> float net_get_momentum </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="structnetwork__t.shtml">network_t</a> *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>net</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Retrieve the momentum of a network. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>net</em>&nbsp;</td><td>Pointer to a neural network. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Momentum of the neural work. </dd></dl>
    </td>
  </tr>
</table>
<a name="a9" doxytag="lwneuralnet.h::net_get_no_of_inputs"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> int net_get_no_of_inputs </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="structnetwork__t.shtml">network_t</a> *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>net</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Retrieve the number of inputs of a network. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>net</em>&nbsp;</td><td>Pointer to a neural network. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Number of neurons in the input layer of the neural network. </dd></dl>
    </td>
  </tr>
</table>
<a name="a11" doxytag="lwneuralnet.h::net_get_no_of_layers"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> int net_get_no_of_layers </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="structnetwork__t.shtml">network_t</a> *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>net</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Retrieve the number of layers of a network. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>net</em>&nbsp;</td><td>Pointer to a neural network. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Number of layers, including the input and output layers, of the neural network. </dd></dl>
    </td>
  </tr>
</table>
<a name="a10" doxytag="lwneuralnet.h::net_get_no_of_outputs"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> int net_get_no_of_outputs </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="structnetwork__t.shtml">network_t</a> *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>net</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Retrieve the number of outputs of a network. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>net</em>&nbsp;</td><td>Pointer to a neural network. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Number of neurons in the output layer of the neural network. </dd></dl>
    </td>
  </tr>
</table>
<a name="a20" doxytag="lwneuralnet.h::net_get_output_error"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> float net_get_output_error </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="structnetwork__t.shtml">network_t</a> *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>net</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Retrieve the output error of a network. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>net</em>&nbsp;</td><td>Pointer to a neural network. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Output error of the neural network.</dd></dl>
Before calling this routine, <a class="el" href="lwneuralnet_8h.shtml#a18">net_compute()</a> and <a class="el" href="lwneuralnet_8h.shtml#a19">net_compute_output_error()</a> should have been called to compute outputs for given inputs and to acually compute the output error. This routine merely returns the output error (which is stored internally in the neural network).     </td>
  </tr>
</table>
<a name="a12" doxytag="lwneuralnet.h::net_get_weight"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> float net_get_weight </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="structnetwork__t.shtml">network_t</a> *&nbsp;</td>
          <td class="mdname" nowrap> <em>net</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>l</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>nl</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>nu</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Retrieve a weight of a network. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>net</em>&nbsp;</td><td>Pointer to a neural network. </td></tr>
    <tr><td valign=top><em>l</em>&nbsp;</td><td>Number of lower layer. </td></tr>
    <tr><td valign=top><em>nl</em>&nbsp;</td><td>Number of neuron in the lower layer. </td></tr>
    <tr><td valign=top><em>nu</em>&nbsp;</td><td>Number of neuron in the next layer. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Weight connecting the neuron numbered nl in the layer numbered l with the neuron numbered nu in the layer numbered l+1. </dd></dl>
    </td>
  </tr>
</table>
<a name="a22" doxytag="lwneuralnet.h::net_jolt"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> void net_jolt </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="structnetwork__t.shtml">network_t</a> *&nbsp;</td>
          <td class="mdname" nowrap> <em>net</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>float&nbsp;</td>
          <td class="mdname" nowrap> <em>factor</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>float&nbsp;</td>
          <td class="mdname" nowrap> <em>range</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Make small random changes to the weight of a network. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>net</em>&nbsp;</td><td>Pointer to a neural network. </td></tr>
    <tr><td valign=top><em>factor</em>&nbsp;</td><td>Floating point number. </td></tr>
    <tr><td valign=top><em>range</em>&nbsp;</td><td>Floating point number.</td></tr>
  </table>
</dl>
All weights in the neural network that are in absolute value smaller than range become a random value from the interval [-range,range]. All other weights get multiplied by a random value from the interval [1-factor,1+factor].     </td>
  </tr>
</table>
<a name="a17" doxytag="lwneuralnet.h::net_load"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> <a class="el" href="structnetwork__t.shtml">network_t</a>* net_load </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const char *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>filename</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Read a network from a file. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>filename</em>&nbsp;</td><td>Pointer to name of file to read from. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>Pointer to the read neural network on success, NULL on failure. </dd></dl>
    </td>
  </tr>
</table>
<a name="a15" doxytag="lwneuralnet.h::net_print"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> int net_print </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const <a class="el" href="structnetwork__t.shtml">network_t</a> *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>net</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Write a network to a stdout. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>net</em>&nbsp;</td><td>Pointer to a neural network. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>0 on success, a negative number on failure. </dd></dl>
    </td>
  </tr>
</table>
<a name="a3" doxytag="lwneuralnet.h::net_randomize"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> void net_randomize </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="structnetwork__t.shtml">network_t</a> *&nbsp;</td>
          <td class="mdname" nowrap> <em>net</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>float&nbsp;</td>
          <td class="mdname" nowrap> <em>range</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Assign random values to all weights in the network. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>net</em>&nbsp;</td><td>Pointer to neural network. </td></tr>
    <tr><td valign=top><em>range</em>&nbsp;</td><td>Floating point number.</td></tr>
  </table>
</dl>
All weights in the neural network are assigned a random value from the interval [-range, range].     </td>
  </tr>
</table>
<a name="a24" doxytag="lwneuralnet.h::net_remove_neurons"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> void net_remove_neurons </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="structnetwork__t.shtml">network_t</a> *&nbsp;</td>
          <td class="mdname" nowrap> <em>net</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>layer</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>neuron</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>int&nbsp;</td>
          <td class="mdname" nowrap> <em>number</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Remove neurons from a network. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>net</em>&nbsp;</td><td>Pointer to a neural network. </td></tr>
    <tr><td valign=top><em>layer</em>&nbsp;</td><td>Integer </td></tr>
    <tr><td valign=top><em>neuron</em>&nbsp;</td><td>Integer </td></tr>
    <tr><td valign=top><em>number</em>&nbsp;</td><td>Integer </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a name="a4" doxytag="lwneuralnet.h::net_reset_deltas"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> void net_reset_deltas </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="structnetwork__t.shtml">network_t</a> *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>net</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Set deltas of the network to 0. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>net</em>&nbsp;</td><td>Pointer to neural network. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a name="a16" doxytag="lwneuralnet.h::net_save"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> int net_save </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">const char *&nbsp;</td>
          <td class="mdname" nowrap> <em>filename</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>const <a class="el" href="structnetwork__t.shtml">network_t</a> *&nbsp;</td>
          <td class="mdname" nowrap> <em>net</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Write a network to a file. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>filename</em>&nbsp;</td><td>Pointer to name of file to write to. </td></tr>
    <tr><td valign=top><em>net</em>&nbsp;</td><td>Pointer to a neural network. </td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>0 on success, a negative number on failure. </dd></dl>
    </td>
  </tr>
</table>
<a name="a6" doxytag="lwneuralnet.h::net_set_learning_rate"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> void net_set_learning_rate </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="structnetwork__t.shtml">network_t</a> *&nbsp;</td>
          <td class="mdname" nowrap> <em>net</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>float&nbsp;</td>
          <td class="mdname" nowrap> <em>learning_rate</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Change the learning rate of a network. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>net</em>&nbsp;</td><td>Pointer to a neural network. </td></tr>
    <tr><td valign=top><em>learning_rate</em>&nbsp;</td><td>Floating point number. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a name="a5" doxytag="lwneuralnet.h::net_set_momentum"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> void net_set_momentum </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="structnetwork__t.shtml">network_t</a> *&nbsp;</td>
          <td class="mdname" nowrap> <em>net</em>, </td>
        </tr>
        <tr>
          <td></td>
          <td></td>
          <td class="md" nowrap>float&nbsp;</td>
          <td class="mdname" nowrap> <em>momentum</em></td>
        </tr>
        <tr>
          <td></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Change the momentum of a network. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>net</em>&nbsp;</td><td>Pointer to a neural network. </td></tr>
    <tr><td valign=top><em>momentum</em>&nbsp;</td><td>Floating point number. </td></tr>
  </table>
</dl>
    </td>
  </tr>
</table>
<a name="a21" doxytag="lwneuralnet.h::net_train"></a><p>
<table class="mdTable" width="100%" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"> void net_train </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="structnetwork__t.shtml">network_t</a> *&nbsp;</td>
          <td class="mdname1" valign="top" nowrap> <em>net</em>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>

      </table>
    </td>
  </tr>
</table>
<table cellspacing=5 cellpadding=0 border=0>
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Train a network. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign=top><em>net</em>&nbsp;</td><td>Pointer to a neural network.</td></tr>
  </table>
</dl>
Before calling this routine, <a class="el" href="lwneuralnet_8h.shtml#a18">net_compute()</a> and <a class="el" href="lwneuralnet_8h.shtml#a19">net_compute_output_error()</a> should have been called to compute outputs for given inputs and to prepare the neural network for training by computing the output error. This routine performs the actual training by backpropagating the output error through the layers.     </td>
  </tr>
</table>
<!-- start page footer -->
<table width="100%" border="0" cellspacing="0" cellpadding="0">
  <tbody>
    <tr bgcolor="#999999">
      <td><img src="images/blank.gif" alt="" border="0" width="1" height="1"></td>
    </tr>
    <tr align="center" valign="middle">
      <td height="50">
      <table cellpadding="0" cellspacing="0" border="0" style="text-align: left; width: 100%;">
        <tbody>
          <tr>
            <td style="text-align: left;"><small>Copyright &copy; 2003<br>Peter van Rossum</small></td>
            <td style="">
	      <a href="http://sourceforge.net"><img src="http://sourceforge.net/sflogo.php?group_id=88387&amp;type=1" width="88" height="31" border="0" alt="SourceForge"></a>
	    </td>
              <td style="text-align: right;"><small>Updated<br>2 October 2003.</small></td>
          </tr>
        </tbody>
      </table>
      </td>
    </tr>
    <tr bgcolor="#999999">
      <td><img src="images/blank.gif" alt="" border="0" width="1" height="1"></td>
    </tr>
  </tbody>
</table>
<!-- end page footer -->

</body>
</html>
