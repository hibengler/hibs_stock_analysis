/* This test fails on 7800GS windows dx9.  succeeds 7800GS ogl and cpu */

#define DOMINO(a,b,x1,y1,x2,y2) ::brook::stream a=b.domain(int2(y1,x1),int2(y2,x2))
#define STREAM(a,x1,y1) ::brook::stream a(::brook::getStreamType((float *)0),x1,y1,-1)
#define STREAM2(a,x1,y1) ::brook::stream a(::brook::getStreamType((float2 *)0),x1,y1,-1)
#define STREAM4(a,x1,y1) ::brook::stream a(::brook::getStreamType((float4 *)0),x1,y1,-1)

reduce void kernel_reduce(float x<>, reduce float result<>) {
  result = result + x;
}
kernel void kernel_add_four (float a<>, float b <>, float c<>,float d<>,out float e<>) {
e=a+b+c+d;
}
kernel void kernel_add_four4 (float4 a<>, float4 b <>, float4 c<>,float4 d<>,out float4 e<>) {
e=a+b+c+d;
}

kernel void kernel_mul( float a<>,float b<>, out float c<> ) {
  c = a*b;
}

kernel void kernel_mul4( float4 a<>,float4 b<>, out float4 c<> ) {
  c = a*b;
}

kernel void kernel_mul2( float4 a<>,float4 b<>, out float4 c<> ) {
  c = a*b;
}

kernel void kernel_zero(  out float c<> ) {
  c = 0.f;
}

kernel void kernel_sigma( float a<>,out float c<> ) {
  c = 1.0f / (1.0f + exp(-a));
}

/* generic copy of data */
kernel void copy (float a<>, out float b<>) {
 b = a;
 }
/* generic copy of data */
kernel void copy4 (float4 a<>, out float4 b<>) {
 b = a;
 }




                              
                              
                              
void dump1(float stream<>,int len,char *prefix) {
float t[20000];
float sum;
int i;
sum=0.f;
printf("%s ",prefix);
streamWrite(stream,t);
for (i=0;i<len;i++) {
  sum = sum + t[i];
  if (i<8) printf("%4.2f ",t[i]);
  }
printf("\n %s cnt %d sum %f\n\n",prefix,len,sum);
}                              
                              

void dump4(float stream<>,int len,char *prefix) {
float4 t[20000];
float sum;
int i;
sum=0.f;
printf("%s ",prefix);
streamWrite(stream,t);
for (i=0;i<len;i++) {
  sum = sum + t[i].x + t[i].y + t[i].z + t[i].w;
  if (i<8) printf("%4.2f,%4.2f,%4.2f,%4.2f ",t[i].x,t[i].y,t[i].z,t[i].w);
  }
printf("\n %s cnt %d sum %f\n\n",prefix,len,sum);
}                              
                              
void dump4x(float stream<>,int len,char *prefix) {
float4 t[20000];
float sum;
int i;
sum=0.f;
printf("%s ",prefix);
streamWrite(stream,t);
for (i=0;i<len;i++) {
  sum = sum + (t[i].x + t[i].y + t[i].z + t[i].w) *0.25;
  if (i<8) printf("%4.2f ",(t[i].x+t[i].y+t[i].z+t[i].w)*0.25f);
  }
printf("\n %s cnt %d sum %f\n\n",prefix,len,sum);
}                              
                              

void valid_reduce_sum(float a<>,int rmax,int csize,
                   float b<>)
/* this reduces destructively by hand.  We do this because there is a bug in reducing on dx9 
First the bug:
If you resuze something the size 47,  position 46 is double counted,  and position 44 is not counted.
This ocurrs at many oddly shaped reductions firther on.

Now this algorithm:
We take the size of the array,  if it is bigger than 4,  we divide into 4 segments (with posible remainder left alone).
Each of the 4 segments is added together and destructively stored in the 4th segment,  Then we loop again with
trunc(the original size /4) + remainder as the new size.
Drawback:  the remainders are not summed as evenly as the rest, so if we are dealing with a large matrix,  some resolution
  might be lost:  1000000 + 0.25 = 1000000.  But since we are reducing by thouseands,not millions,  things should be ok.

If the size is <4 then add them all together and place them into the output.

Example:
Size 47
47/4 = 11

add 0-11 11-22 22-33 33-44 into 33-44
New size 33-47 = 14
14/4 = 3
add 33-36 36-39 39-42 42-45 into 42-45
new size 42-47 = 5
5/4= 1
add 42-43 43-44 44-45 45-46 into 45-46
new size 46-47 = 2

Add 46 + 47 into result

*/
{
int i;

int rmin=0;
int rsize = rmax - rmin;
while (rsize >24) {
  int offset = rsize>>2;
  
  
  kernel_add_four(a.domain(int2(rmin,0),int2(rmin+offset,csize)),
       a.domain(int2(rmin+offset,0),int2(rmin+offset+offset,csize)),
        a.domain(int2(rmin+offset+offset,0),int2(rmin+offset*3,csize)),
        a.domain(int2(rmin+offset*3,0),int2(rmin+offset*4,csize)),
        a.domain(int2(rmin+offset*3,0),int2(rmin+offset*4,csize)) );
  
  rmin = rmin + offset*3;
  rsize = rmax - rmin;
  
    
  }
{
float x<csize,rsize>;
copy(a.domain(int2(rmin,0),int2(rmax,csize)),x);  
kernel_reduce(x,b);
}

}





kernel void kernel_transpose (float inx[][], out float result<>) {
result=inx[indexof result.yx];

}
kernel void kernel4_zero(out float4 result<>) {
result=0.f;
}

kernel void kernel4_mul( float4 a<>,float4 b<>, out float4 c<> ) {
  c = a*b;
}

/* note - kernel reduce has a bug in it for weird sized shapes. */
reduce void kernel4_reduce(float4 x<>, reduce float4 result<>) {
  result = result + x;
}




void valid_reduce_sum4(float4 a<>,int rmax,int csize,
                   float4 b<>)
/* this reduces destructively by hand.  We do this because there is a bug in reducing on dx9 
First the bug:
If you resuze something the size 47,  position 46 is double counted,  and position 44 is not counted.
This ocurrs at many oddly shaped reductions firther on.

Now this algorithm:
We take the size of the array,  if it is bigger than 4,  we divide into 4 segments (with posible remainder left alone).
Each of the 4 segments is added together and destructively stored in the 4th segment,  Then we loop again with
trunc(the original size /4) + remainder as the new size.
Drawback:  the remainders are not summed as evenly as the rest, so if we are dealing with a large matrix,  some resolution
  might be lost:  1000000 + 0.25 = 1000000.  But since we are reducing by thouseands,not millions,  things should be ok.

If the size is <4 then add them all together and place them into the output.

Example:
Size 47
47/4 = 11

add 0-11 11-22 22-33 33-44 into 33-44
New size 33-47 = 14
14/4 = 3
add 33-36 36-39 39-42 42-45 into 42-45
new size 42-47 = 5
5/4= 1
add 42-43 43-44 44-45 45-46 into 45-46
new size 46-47 = 2

Add 46 + 47 into result

*/
{
int i;
int rmin=0;
int rsize = rmax - rmin;
while (rsize >24) {
  int offset = rsize>>2;
  
  
  kernel_add_four4(a.domain(int2(rmin,0),int2(rmin+offset,csize)),
       a.domain(int2(rmin+offset,0),int2(rmin+offset+offset,csize)),
        a.domain(int2(rmin+offset+offset,0),int2(rmin+offset*3,csize)),
        a.domain(int2(rmin+offset*3,0),int2(rmin+offset*4,csize)),
        a.domain(int2(rmin+offset*3,0),int2(rmin+offset*4,csize)) );
  
  rmin = rmin + offset*3;
  rsize = rmax - rmin;
  
    
  }
{
float4 x<csize,rsize>;
copy4(a.domain(int2(rmin,0),int2(rmax,csize)),x);  
kernel4_reduce(x,b);
}

}


kernel void kernel4_transpose (float4 inx[][], out float4 result<>) {
result=inx[indexof result.yx];

}

// test 4 x an array of 4
kernel void km( float4 a<>,float4 b1<>,
float4 b2<>,
float4 b3<>,
float4 b4<>,
 out float4 c<> ) {
 c = a.xyzw * b1 + a.yzwx * b2 + a.zwxy * b3 + a.wxyz * b4; 
}


// test a 2 x float4 into 2
kernel void mm(float2 a<>,float4 b<>, out float2 c<>) {
float4 m;
m = a.xyxy * b;
c= m.xz + m.yw;
}


main() {
  float input[6]={.4f,.3f,.6f,.7f,.1f,.2f};
  float output[2];
  int i;
  STREAM(ob0,1,7);
    
  STREAM(w1_0,2048,7);
  STREAM(t1_0,2048,7);
  STREAM(at1,2048,1);
  STREAM(ot1,1,2048);
  STREAM(ob1,1,2048);
  
  STREAM(w2_1,2048,2048);
  STREAM(t2_1,2048,2048);
  STREAM(at2,2048,1);
  STREAM(ot2,1,2048);
  STREAM(ob2,1,2048);

  STREAM(w3_2,2,2048);
  STREAM(t3_2,2,2048);
  STREAM(at3,2,1);
  STREAM(ot3,2,1);
  STREAM(ob3,1,3);
  DOMINO(o0,ob0,0,0,1,6);
  DOMINO(o1,ob1,0,0,1,2048);
  DOMINO(o2,ob2,0,0,1,2048);
  DOMINO(o3,ob3,0,0,1,2);
  STREAM4(a,1,512);
  STREAM4(b1,512,512);
  STREAM4(b2,512,512);
  STREAM4(b3,512,512);
  STREAM4(b4,512,512);
  STREAM4(x4,512,512);
  STREAM4(a1,512,1);
  STREAM2(ma,1,1024);
  STREAM4(mb,1024,1024);
  STREAM2(mc,1024,1024);
  STREAM2(md,1024,1);
//  kernel_zero(w1_0);
//  kernel_zero(w2_1);
//  kernel_zero(w3_2);
// valid_reduce_sum - 802
// kernel_mul - 3.40
// kernel sigma -85
// kernel transpose .75
  for (i=0;i<4096;i++) {
//  streamRead(o1,input);
//  kernel_mul(w1_0,ob0,t1_0);
//  valid_reduce_sum(t1_0,7,2048,at1);
//  kernel_sigma(at1,ot1);
//  kernel_transpose(ot1,o1);
  
//   kernel_mul(w2_1,ob1,t2_1);
//  valid_reduce_sum(t2_1,2048,2048,at2); 
//  km(a,b1,b2,b3,b4,x4);
//  valid_reduce_sum4(x4,512,512,a1); // 30% takes longer than the other way.
  mm(ma,mb,mc);
 // kernel_sigma(at2,ot2);
 // kernel_transpose(ot2,o2);
  
//  kernel_mul(w3_2,ob2,t3_2);
//  valid_reduce_sum(t3_2,2048,2,at3);
//  kernel_sigma(at3,ot3);
//  kernel_transpose(ot3,o3);
//  streamWrite(o3,output);
  
  }  
  

}
